import { test } from '@japa/runner'
import { definitionContent, javascriptContent } from '../src/generate_routes.js'
import { SerializedRoute } from '../src/types/manifest.js'

function cs(s: string) {
  return s.replace(/ /g, '').replace(/\t/g, '').replace(/\n/g, '')
}

test.group('definitionContent', () => {
  test('should generate definition content correctly without params', ({ assert }) => {
    const bucket = [
      {
        name: 'home',
        path: '/home',
        method: 'get',
        domain: 'root',
      },
      {
        name: 'user',
        path: '/users/:id',
        method: 'get',
        params: { required: ['id'] },
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedDefinitionContent = `// Generated automatically by @izzyjs/route
// Do not modify this file

export declare const routes: readonly [
  {
    readonly name: 'home';
    readonly path: '/home';
    readonly method: 'get';
    readonly domain: 'root';
  },
  {
    readonly name: 'user';
    readonly path: '/users/:id';
    readonly method: 'get';
    readonly params: readonly ['id'];
    readonly domain: 'root';
  }
];
export type Routes = typeof routes;
export type Route = Routes[number];
export type RouteWithName = Extract<Route, { name: string }>;
export type RouteWithParams = Extract<Route, { params: ReadonlyArray<string>; }> | Extract<Route, { optionalParams: ReadonlyArray<string>; }>;
export type RouteName = Exclude<RouteWithName['name'], ''>;`

    const generatedDefinitionContent = definitionContent(bucket)

    assert.equal(cs(generatedDefinitionContent), cs(expectedDefinitionContent))
  })

  test('should generate definition content correctly with params', ({ assert }) => {
    const bucket = [
      {
        name: 'home',
        path: '/home',
        method: 'get',
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedDefinitionContent = `// Generated automatically by @izzyjs/route
// Do not modify this file
export declare const routes: readonly [
\t{
\t\treadonly name: 'home';
\t\treadonly path: '/home';
\t\treadonly method: 'get';
\t\treadonly domain: 'root';
\t}
];
export type Routes = typeof routes;
export type Route = Routes[number];
export type RouteWithName = Extract<Route, { name: string }>;
export type RouteWithParams = Extract<Route, { params: ReadonlyArray<string>; }> | Extract<Route, { optionalParams: ReadonlyArray<string>; }>;
export type RouteName = Exclude<RouteWithName['name'], ''>;`

    const generatedDefinitionContent = definitionContent(bucket)

    assert.equal(cs(generatedDefinitionContent), cs(expectedDefinitionContent))
  })
})

test.group('javascriptContent', () => {
  test('should generate javascript content correctly', ({ assert }) => {
    const bucket = [
      {
        name: 'home',
        path: '/home',
        method: 'get',
        domain: 'root',
      },
      {
        name: 'user',
        path: '/users/:id',
        method: 'get',
        params: { required: ['id'] },
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedJavascriptContent = `/* eslint-disable prettier/prettier */
// Generated automatically by named routes hook
/* DO NOT EDIT THIS FILE DIRECTLY */

export const routes = [
	{
		"name": "home",
		"path": "/home",
		"method": "get",
		"domain": "root"
	},
	{
		"name": "user",
		"path": "/users/:id",
		"method": "get",
		"params": {
			"required": ["id"]
		},
		"domain": "root"
	}
];`

    const generatedJavascriptContent = javascriptContent(bucket)

    assert.equal(cs(generatedJavascriptContent), cs(expectedJavascriptContent))
  })

  test('should generate definition content correctly with optional parameters', async ({
    assert,
  }) => {
    const bucket = [
      {
        name: 'posts.show',
        path: '/posts/:id/:slug?',
        method: 'get',
        params: {
          required: ['id'],
          optional: ['slug'],
        },
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedDefinitionContent = `// Generated automatically by @izzyjs/route
// Do not modify this file

export declare const routes: readonly [
  {
    readonly name: 'posts.show';
    readonly path: '/posts/:id/:slug?';
    readonly method: 'get';
    readonly params: readonly ['id'];
    readonly optionalParams: readonly ['slug'];
    readonly domain: 'root';
  }
];
export type Routes = typeof routes;
export type Route = Routes[number];
export type RouteWithName = Extract<Route, { name: string }>;
export type RouteWithParams = Extract<Route, { params: ReadonlyArray<string>; }> | Extract<Route, { optionalParams: ReadonlyArray<string>; }>;
export type RouteName = Exclude<RouteWithName['name'], ''>;`

    const generatedDefinitionContent = definitionContent(bucket)

    assert.equal(cs(generatedDefinitionContent), cs(expectedDefinitionContent))
  })

  test('should generate definition content correctly with only optional parameters', async ({
    assert,
  }) => {
    const bucket = [
      {
        name: 'posts.index',
        path: '/posts/:category?',
        method: 'get',
        params: {
          optional: ['category'],
        },
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedDefinitionContent = `// Generated automatically by @izzyjs/route
// Do not modify this file

export declare const routes: readonly [
  {
    readonly name: 'posts.index';
    readonly path: '/posts/:category?';
    readonly method: 'get';
    readonly optionalParams: readonly ['category'];
    readonly domain: 'root';
  }
];
export type Routes = typeof routes;
export type Route = Routes[number];
export type RouteWithName = Extract<Route, { name: string }>;
export type RouteWithParams = Extract<Route, { params: ReadonlyArray<string>; }> | Extract<Route, { optionalParams: ReadonlyArray<string>; }>;
export type RouteName = Exclude<RouteWithName['name'], ''>;`

    const generatedDefinitionContent = definitionContent(bucket)

    assert.equal(cs(generatedDefinitionContent), cs(expectedDefinitionContent))
  })

  test('should generate javascript content correctly with optional parameters', async ({
    assert,
  }) => {
    const bucket = [
      {
        name: 'posts.show',
        path: '/posts/:id/:slug?',
        method: 'get',
        params: {
          required: ['id'],
          optional: ['slug'],
        },
        domain: 'root',
      },
    ] as SerializedRoute[]

    const expectedJavascriptContent = `/* eslint-disable prettier/prettier */
// Generated automatically by named routes hook
/* DO NOT EDIT THIS FILE DIRECTLY */

export const routes = [
	{
		"name": "posts.show",
		"path": "/posts/:id/:slug?",
		"method": "get",
		"params": {
			"required": ["id"],
			"optional": ["slug"]
		},
		"domain": "root"
	}
];`

    const generatedJavascriptContent = javascriptContent(bucket)

    assert.equal(cs(generatedJavascriptContent), cs(expectedJavascriptContent))
  })
})
